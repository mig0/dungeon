import pygame
from config import *

MAP_SIZE_X = PLAY_SIZE_X + 2
MAP_SIZE_Y = PLAY_SIZE_Y + 3

WIDTH = CELL_W * MAP_SIZE_X
HEIGHT = CELL_H * MAP_SIZE_Y
POS_CENTER_X = WIDTH / 2
POS_CENTER_Y = HEIGHT / 2
POS_STATUS_Y = HEIGHT - CELL_H / 2

BONUS_NONE   = 0
BONUS_HEALTH = 1
BONUS_ATTACK = 2

ARROW_KEY_R = pygame.K_RIGHT
ARROW_KEY_L = pygame.K_LEFT
ARROW_KEY_D = pygame.K_DOWN
ARROW_KEY_U = pygame.K_UP

CELL_STATUS = 0
CELL_BORDER = 1
CELL_FLOOR  = 2
CELL_CRACK  = 3
CELL_BONES  = 4
CELL_ROCKS  = 5
CELL_PLATE  = 6
CELL_BARREL = 7
CELL_PORTAL = 8

CELL_FLOOR_ADDITIONS_RANDGEN = (CELL_CRACK, CELL_BONES, CELL_ROCKS)
CELL_FLOOR_ADDITIONS_FREQUENT = (*CELL_FLOOR_ADDITIONS_RANDGEN, *((CELL_FLOOR,) * EMPTY_FLOOR_FREQUENCY))
CELL_FLOOR_ADDITIONS = (*CELL_FLOOR_ADDITIONS_RANDGEN, CELL_PLATE, CELL_BARREL, CELL_PORTAL)
CELL_ENEMY_OBSTACLES = (CELL_STATUS, CELL_BORDER, CELL_BARREL, CELL_PORTAL)
CELL_CHAR_OBSTACLES  = (CELL_STATUS, CELL_BORDER)

PLAY_X1 = 1
PLAY_X2 = PLAY_X1 + PLAY_SIZE_X - 1
PLAY_Y1 = 1
PLAY_Y2 = PLAY_Y1 + PLAY_SIZE_Y - 1

PLAY_X_RANGE = range(PLAY_X1, PLAY_X2 + 1)
PLAY_Y_RANGE = range(PLAY_Y1, PLAY_Y2 + 1)

ROOM_SIZE_X = [
	int(PLAY_SIZE_X / 2),
	PLAY_SIZE_X - int(PLAY_SIZE_X / 2) - 1,
	int(PLAY_SIZE_X / 2),
	PLAY_SIZE_X - int(PLAY_SIZE_X / 2) - 1,
]
ROOM_SIZE_Y = [
	int(PLAY_SIZE_Y / 2),
	int(PLAY_SIZE_Y / 2),
	PLAY_SIZE_Y - int(PLAY_SIZE_Y / 2) - 1,
	PLAY_SIZE_Y - int(PLAY_SIZE_Y / 2) - 1,
]

ROOM_X1 = [
	PLAY_X1,
	PLAY_X1 + ROOM_SIZE_X[0] + 1,
	PLAY_X1,
	PLAY_X1 + ROOM_SIZE_X[0] + 1,
]
ROOM_X2 = [
	PLAY_X1 + ROOM_SIZE_X[0] - 1,
	PLAY_X2,
	PLAY_X1 + ROOM_SIZE_X[0] - 1,
	PLAY_X2,
]
ROOM_Y1 = [
	PLAY_Y1,
	PLAY_Y1,
	PLAY_Y1 + ROOM_SIZE_Y[0] + 1,
	PLAY_Y1 + ROOM_SIZE_Y[0] + 1,
]
ROOM_Y2 = [
	PLAY_Y1 + ROOM_SIZE_Y[0] - 1,
	PLAY_Y1 + ROOM_SIZE_Y[0] - 1,
	PLAY_Y2,
	PLAY_Y2,
]

ROOM_X_RANGE = [
	range(ROOM_X1[0], ROOM_X2[0] + 1),
	range(ROOM_X1[1], ROOM_X2[1] + 1),
	range(ROOM_X1[2], ROOM_X2[2] + 1),
	range(ROOM_X1[3], ROOM_X2[3] + 1),
]
ROOM_Y_RANGE = [
	range(ROOM_Y1[0], ROOM_Y2[0] + 1),
	range(ROOM_Y1[1], ROOM_Y2[1] + 1),
	range(ROOM_Y1[2], ROOM_Y2[2] + 1),
	range(ROOM_Y1[3], ROOM_Y2[3] + 1),
]

ROOM_BORDER_X = ROOM_X2[0] + 1
ROOM_BORDER_Y = ROOM_X2[0] + 1

COLOR_PUZZLE_SIZE_X = 11
COLOR_PUZZLE_SIZE_Y = 11
NUM_COLOR_PUZZLE_VALUES = 6

COLOR_MAP_SOLVED = [[1] * COLOR_PUZZLE_SIZE_X for y in range(COLOR_PUZZLE_SIZE_Y)]

COLOR_PUZZLE_X1 = PLAY_X1 + int((PLAY_SIZE_X - COLOR_PUZZLE_SIZE_X) / 2)
COLOR_PUZZLE_X2 = PLAY_X1 + int((PLAY_SIZE_X - COLOR_PUZZLE_SIZE_X) / 2) + COLOR_PUZZLE_SIZE_X - 1
COLOR_PUZZLE_Y1 = PLAY_Y1 + int((PLAY_SIZE_Y - COLOR_PUZZLE_SIZE_Y) / 2)
COLOR_PUZZLE_Y2 = PLAY_Y1 + int((PLAY_SIZE_Y - COLOR_PUZZLE_SIZE_Y) / 2) + COLOR_PUZZLE_SIZE_Y - 1

COLOR_PUZZLE_X_RANGE = range(COLOR_PUZZLE_X1, COLOR_PUZZLE_X2 + 1)
COLOR_PUZZLE_Y_RANGE = range(COLOR_PUZZLE_Y1, COLOR_PUZZLE_Y2 + 1)

