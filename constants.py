import pygame
from config import *

MAP_SIZE_X = PLAY_SIZE_X + 2
MAP_SIZE_Y = PLAY_SIZE_Y + 2

MAP_W = CELL_W * MAP_SIZE_X
MAP_H = CELL_H * MAP_SIZE_Y
MAP_POS_X1 = 0
MAP_POS_Y1 = 0

WIDTH = CELL_W * MAP_SIZE_X
HEIGHT = CELL_H * (MAP_SIZE_Y + 1)
POS_CENTER_X = WIDTH / 2
POS_CENTER_Y = HEIGHT / 2
POS_STATUS_Y = HEIGHT - CELL_H / 2

BONUS_NONE   = 0
BONUS_HEALTH = 1
BONUS_ATTACK = 2

ARROW_KEY_R = pygame.K_RIGHT
ARROW_KEY_L = pygame.K_LEFT
ARROW_KEY_D = pygame.K_DOWN
ARROW_KEY_U = pygame.K_UP

CELL_BORDER = '#'
CELL_FLOOR  = '.'
CELL_CRACK  = ','
CELL_BONES  = ':'
CELL_ROCKS  = ';'
CELL_PLATE  = '_'
CELL_GATE0  = 'G'
CELL_GATE1  = '^'
CELL_START  = 'S'
CELL_FINISH = 'F'
CELL_PORTAL = 'O'
CELL_SAND   = '-'
CELL_VOID   = ''
CELL_INTERNAL1 = '1'

CELL_FLOOR_TYPES_RANDGEN = (CELL_CRACK, CELL_BONES, CELL_ROCKS)
CELL_FLOOR_TYPES_FREQUENT = (*CELL_FLOOR_TYPES_RANDGEN, *((CELL_FLOOR,) * EMPTY_FLOOR_FREQUENCY))
CELL_FLOOR_TYPES = (*CELL_FLOOR_TYPES_RANDGEN, CELL_FLOOR)
CELL_FLOOR_EXTENSIONS = (*CELL_FLOOR_TYPES_RANDGEN, CELL_PLATE, CELL_START, CELL_FINISH, CELL_PORTAL, CELL_GATE0, CELL_GATE1)
CELL_ENEMY_PLACE_OBSTACLES = (CELL_BORDER, CELL_PORTAL, CELL_GATE0, CELL_GATE1, CELL_SAND, CELL_VOID)
CELL_CHAR_PLACE_OBSTACLES = (CELL_BORDER, CELL_PLATE, CELL_PORTAL, CELL_GATE0, CELL_GATE1, CELL_SAND, CELL_VOID)
CELL_CHAR_MOVE_OBSTACLES  = (CELL_BORDER, CELL_GATE0, CELL_VOID)

LIFT_A = '+'
LIFT_H = 'h'
LIFT_V = 'v'
LIFT_L = 'l'
LIFT_R = 'r'
LIFT_U = 'u'
LIFT_D = 'd'

LIFT_TYPE_DIRECTIONS = {
	LIFT_A:  [(-1, 0), (+1, 0), (0, -1), (0, +1)],
	LIFT_H: [(-1, 0), (+1, 0)],
	LIFT_V: [(0, -1), (0, +1)],
	LIFT_L: [(-1, 0)],
	LIFT_R: [(+1, 0)],
	LIFT_U: [(0, -1)],
	LIFT_D: [(0, +1)],
}
LIFT_TYPES = *LIFT_TYPE_DIRECTIONS,

PLAY_X1 = 1
PLAY_X2 = PLAY_X1 + PLAY_SIZE_X - 1
PLAY_Y1 = 1
PLAY_Y2 = PLAY_Y1 + PLAY_SIZE_Y - 1

PLAY_X_RANGE = range(PLAY_X1, PLAY_X2 + 1)
PLAY_Y_RANGE = range(PLAY_Y1, PLAY_Y2 + 1)

MAP_X_RANGE = range(0, MAP_SIZE_X)
MAP_Y_RANGE = range(0, MAP_SIZE_Y)

ROOM_SIZE_X = [
	int(PLAY_SIZE_X / 2),
	PLAY_SIZE_X - int(PLAY_SIZE_X / 2) - 1,
	int(PLAY_SIZE_X / 2),
	PLAY_SIZE_X - int(PLAY_SIZE_X / 2) - 1,
]
ROOM_SIZE_Y = [
	int(PLAY_SIZE_Y / 2),
	int(PLAY_SIZE_Y / 2),
	PLAY_SIZE_Y - int(PLAY_SIZE_Y / 2) - 1,
	PLAY_SIZE_Y - int(PLAY_SIZE_Y / 2) - 1,
]

ROOM_X1 = [
	PLAY_X1,
	PLAY_X1 + ROOM_SIZE_X[0] + 1,
	PLAY_X1,
	PLAY_X1 + ROOM_SIZE_X[0] + 1,
]
ROOM_X2 = [
	PLAY_X1 + ROOM_SIZE_X[0] - 1,
	PLAY_X2,
	PLAY_X1 + ROOM_SIZE_X[0] - 1,
	PLAY_X2,
]
ROOM_Y1 = [
	PLAY_Y1,
	PLAY_Y1,
	PLAY_Y1 + ROOM_SIZE_Y[0] + 1,
	PLAY_Y1 + ROOM_SIZE_Y[0] + 1,
]
ROOM_Y2 = [
	PLAY_Y1 + ROOM_SIZE_Y[0] - 1,
	PLAY_Y1 + ROOM_SIZE_Y[0] - 1,
	PLAY_Y2,
	PLAY_Y2,
]

ROOM_X_RANGE = [
	range(ROOM_X1[0], ROOM_X2[0] + 1),
	range(ROOM_X1[1], ROOM_X2[1] + 1),
	range(ROOM_X1[2], ROOM_X2[2] + 1),
	range(ROOM_X1[3], ROOM_X2[3] + 1),
]
ROOM_Y_RANGE = [
	range(ROOM_Y1[0], ROOM_Y2[0] + 1),
	range(ROOM_Y1[1], ROOM_Y2[1] + 1),
	range(ROOM_Y1[2], ROOM_Y2[2] + 1),
	range(ROOM_Y1[3], ROOM_Y2[3] + 1),
]

ROOM_BORDER_X = ROOM_X2[0] + 1
ROOM_BORDER_Y = ROOM_Y2[0] + 1

MAX_COLOR_PUZZLE_VALUES = 6

COLOR_PUZZLE_VALUE_OUTSIDE = -1
COLOR_PUZZLE_VALUE_PLATE   = -2
COLOR_PUZZLE_VALUE_RED     = 0
COLOR_PUZZLE_VALUE_GREEN   = 1
COLOR_PUZZLE_VALUE_BLUE    = 2
COLOR_PUZZLE_VALUE_YELLOW  = 3
COLOR_PUZZLE_VALUE_CYAN    = 4
COLOR_PUZZLE_VALUE_PURPLE  = 5

DEFAULT_COLOR_PUZZLE_PLAY_SIZE_X = int((PLAY_SIZE_X - 1) / 2) * 2 + 1
DEFAULT_COLOR_PUZZLE_PLAY_SIZE_Y = int((PLAY_SIZE_Y - 1) / 2) * 2 + 1

DEFAULT_COLOR_PUZZLE_ROOM_SIZE_X = [
	int((ROOM_SIZE_X[0] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_X[1] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_X[2] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_X[3] - 1) / 2) * 2 + 1,
]
DEFAULT_COLOR_PUZZLE_ROOM_SIZE_Y = [
	int((ROOM_SIZE_Y[0] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_Y[1] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_Y[2] - 1) / 2) * 2 + 1,
	int((ROOM_SIZE_Y[3] - 1) / 2) * 2 + 1,
]
